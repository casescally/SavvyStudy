@model SavvyStudy.Models.WordUntranslatedPracticeViewModel
@{
    ViewData["Title"] = "WordUntranslatedTypedPractice";

    var nextWords = new List<Word>();
}

<h1>Select the correct untranslated word</h1>

<hr />


<dl class="row">

    <dt class="col-sm-2">
        @Html.DisplayNameFor(model => model.Translated)
    </dt>
    <dd class="col-sm-10">
        @Html.DisplayFor(model => model.Translated)
    </dd>
    <dt class="col-sm-2">
        @Html.DisplayNameFor(model => model.Pronunciation)
    </dt>
    <dd class="col-sm-10">
        @Html.DisplayFor(model => model.Pronunciation)
    </dd>
    <dt class="col-sm-2">
        @Html.DisplayNameFor(model => model.Language)
    </dt>
    <dd class="col-sm-10">
        @Html.DisplayFor(model => model.Language)
    </dd>
</dl>

<div class="col-sm-10 answer" onclick="selected(this)">
    @Html.DisplayFor(model => model.NextWords[0].Untranslated)
</div>
<div class="col-sm-10 answer" onclick="selected(this)">
    @Html.DisplayFor(model => model.NextWords[1].Untranslated)
</div>
<div class="col-sm-10 answer" onclick="selected(this)">
    @Html.DisplayFor(model => model.Untranslated)
</div>

<script>

    var divItems = document.getElementsByClassName("col-sm-10 answer");
    
    window.onload = function getInput() {
        var input1 = document.getElementById("userInput").value;
        console.log(input1, '<=the input');
    }

    for (var i = 0; i < divItems.length; i++) {
        var target = Math.floor(Math.random() * divItems.length - 1) + 1;
        var target2 = Math.floor(Math.random() * divItems.length - 1) + 1;
        divItems.eq(target).before(divItems.eq(target2));
    }

    function selected(item) {
        this.clear();
        item.style = "border: 1px solid green;";
        //sets user answer
        document.getElementById("userInput").defaultValue = item.innerHTML.substring(5);
        document.getElementById("userInput").value = item.innerHTML.substring(5);
        console.log(document.getElementById("userInput"), '<==UPDATED')
    }

    function clear() {
        for (var i = 0; i < divItems.length; i++) {
            var item = divItems[i];
            item.style.border = 'none';
        }
    }
</script>

<div class="row">
    <div class="col-md-4">

        <form asp-action="WordUntranslatedTypedPractice">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group">
                <label hidden asp-for="Untranslated" class="control-label"></label>
                <input hidden asp-for="Untranslated" class="form-control" id="userInput" name="untranslatedGuess" />
                <span asp-validation-for="Untranslated" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label hidden asp-for="Id" class="control-label"></label>
                <input hidden asp-for="Id" class="form-control" />
                <span asp-validation-for="Id" class="text-danger"></span>
            </div>

            <div class="form-group">
                <input type="submit" value="Check" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
